from motor.motor_asyncio import AsyncIOMotorClient
from beanie import init_beanie
from src.config import settings
from models.user import User
from datetime import timezone, datetime
import logging


class Database:
    def __init__(self, uri: str, database_name: str):
        self.client = AsyncIOMotorClient(uri)
        self.db = self.client[database_name]

    def get_db(self):
        return self.db

    async def init_db(self, document_models):
        try:
            await init_beanie(database=self.db, document_models=document_models)
            logging.info("Beanie ODM initialized successfully.")
        except Exception as e:
            logging.error(f"Error initializing Beanie ODM: {e}")
            raise


database = Database(settings.mongo_uri, settings.database_name)


# âœ… Export this function for external use
async def get_db():
    return database.get_db()


# Optional: for testing insert
async def insert_user():
    user = User(
        username="johndoe",
        name="John Doe",
        email="johndoe@example.com",
        hashed_password="hashed_password_here",
        created_at=datetime.now(timezone.utc),
    )
    await user.insert()
    print(f"User inserted with ID: {user.id}")
