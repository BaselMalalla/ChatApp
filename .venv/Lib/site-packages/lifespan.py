from typing import AsyncGenerator
from fastapi import FastAPI
from db import database
import logging
from models.user import User

# Configure logging
logger = logging.getLogger("lifespan")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("[%(asctime)s] %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)
client = database.get_db()


async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    logger.info("🚀 Starting FastAPI server...")

    try:
        # Health check: Ping MongoDB
        logger.info("🔍 Pinging MongoDB to verify connection...")
        response = await client.command("ping")
        logger.info(f"✅ MongoDB ping successful: {response}")

        # Initialize Beanie ODM with models
        logger.info("📦 Initializing Beanie ODM with document models...")
        await database.init_db([User])

        # Yield control back to FastAPI until shutdown
        logger.info("✅ Startup completed. Application is now running.")
        yield

    except Exception as e:
        logger.exception("❌ Error during application startup.")
        raise RuntimeError(f"Application failed to start: {e}") from e

    finally:
        # Graceful shutdown
        logger.info("🛑 Shutting down FastAPI server...")
        client.close()
        logger.info("✅ MongoDB client connection closed.")
        logger.info("👋 Shutdown complete.")